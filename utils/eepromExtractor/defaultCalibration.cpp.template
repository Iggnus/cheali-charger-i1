echo "/*
    cheali-charger - open source firmware for a variety of LiPo chargers
    Copyright (C) 2013  Pawe≈Ç Stawicki. All right reserved.

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

#include \"AnalogInputsPrivate.h\"
#include \"memory.h\"
#include \"Utils.h\"

const AnalogInputs::DefaultValues AnalogInputs::inputsP_[] PROGMEM = {

    {{$c_p0_x__Vout_plus_pin,    $c_p0_y__Vout_plus_pin},         {$c_p1_x__Vout_plus_pin, $c_p1_y__Vout_plus_pin}},   //Vout_plus_pin
    {{$c_p0_x__Vout_minus_pin,   $c_p0_y__Vout_minus_pin},        {$c_p1_x__Vout_minus_pin,$c_p1_y__Vout_minus_pin}},  //Vout_minus_pin
    {{$c_p0_x__Ismps,            $c_p0_y__Ismps},                 {$c_p1_x__Ismps,         $c_p1_y__Ismps}},           //Ismps
    {{$c_p0_x__Idischarge,       $c_p0_y__Idischarge},            {$c_p1_x__Idischarge,    $c_p1_y__Idischarge}},      //Idischarge


    {{$c_p0_x__VoutMux,          $c_p0_y__VoutMux},               {$c_p1_x__VoutMux,       $c_p1_y__VoutMux}},   //VoutMux
    {{$c_p0_x__Tintern,          $c_p0_y__Tintern},               {$c_p1_x__Tintern,       $c_p1_y__Tintern}},   //Tintern
    {{$c_p0_x__Vin,              $c_p0_y__Vin},                   {$c_p1_x__Vin,           $c_p1_y__Vin}},       //Vin
    {{$c_p0_x__Textern,          $c_p0_y__Textern},               {$c_p1_x__Textern,       $c_p1_y__Textern}},   //Textern

    {{$c_p0_x__Vb0_pin,          $c_p0_y__Vb0_pin},               {$c_p1_x__Vb0_pin,       $c_p1_y__Vb0_pin}},   //Vb0_pin
    {{$c_p0_x__Vb1_pin,          $c_p0_y__Vb1_pin},               {$c_p1_x__Vb1_pin,       $c_p1_y__Vb1_pin}},   //Vb1_pin
    {{$c_p0_x__Vb2_pin,          $c_p0_y__Vb2_pin},               {$c_p1_x__Vb2_pin,       $c_p1_y__Vb2_pin}},   //Vb2_pin
    {{$c_p0_x__Vb3_pin,          $c_p0_y__Vb3_pin},               {$c_p1_x__Vb3_pin,       $c_p1_y__Vb3_pin}},   //Vb3_pin
    {{$c_p0_x__Vb4_pin,          $c_p0_y__Vb4_pin},               {$c_p1_x__Vb4_pin,       $c_p1_y__Vb4_pin}},   //Vb4_pin
    {{$c_p0_x__Vb5_pin,          $c_p0_y__Vb5_pin},               {$c_p1_x__Vb5_pin,       $c_p1_y__Vb5_pin}},   //Vb5_pin
    {{$c_p0_x__Vb6_pin,          $c_p0_y__Vb6_pin},               {$c_p1_x__Vb6_pin,       $c_p1_y__Vb6_pin}},   //Vb6_pin
#if MAX_BANANCE_CELLS > 6
    {{$c_p0_x__Vb7_pin,          $c_p0_y__Vb7_pin},               {$c_p1_x__Vb7_pin,       $c_p1_y__Vb7_pin}},   //Vb7_pin
    {{$c_p0_x__Vb8_pin,          $c_p0_y__Vb8_pin},               {$c_p1_x__Vb8_pin,       $c_p1_y__Vb8_pin}},   //Vb8_pin
#endif

    {{$c_p0_x__IsmpsValue,       $c_p0_y__IsmpsValue},            {$c_p1_x__IsmpsValue,     $c_p1_y__IsmpsValue}},            //IsmpsSet
    {{$c_p0_x__IdischargeValue,  $c_p0_y__IdischargeValue},       {$c_p1_x__IdischargeValue,$c_p1_y__IdischargeValue}},       //IdischargeSet
};

namespace {
    void assert() {
        STATIC_ASSERT(sizeOfArray(AnalogInputs::inputsP_) == AnalogInputs::PHYSICAL_INPUTS);
    }
}

"